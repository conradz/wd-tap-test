#!/usr/bin/env node
var optimist = require('optimist'),
    path = require('path'),
    ansi = require('ansi')(process.stdout),
    lib = require('../');

var args = optimist
    .usage(
        '$0 <options> [browsers...]\n' +
        'Run tests in the browser using a Selenium Server.')
    .options('w', {
        alias: 'watch',
        boolean: true,
        describe: 'Watch the current directory and run tests when a file changes'
    })
    .options('b', {
        alias: 'browserify',
        boolean: true,
        describe: 'Browserify source file before serving'
    })
    .options('s', {
        alias: 'source',
        default: 'test.js',
        describe: 'Test source file'
    })
    .options('server', {
        default: 'localhost',
        describe: 'Selenium server to use'
    })
    .options('?', {
        alias: 'help',
        boolean: true,
        describe: 'Show help message'
    })
    .argv;

var config = getConfig();

if (args.help) {
    optimist.showHelp();
    process.exit(1);
} else if (args.watch) {
    watch();
} else {
    run();
}

function watch() {
    var watcher = lib.watch(config);
    watcher.on('run', function(runner) {
        logRun(runner, false);
    });
}

function run() {
    logRun(lib.run(config), true);
}

function getConfig() {
    if (args._.length === 0) {
        args._ = ['firefox'];
    }

    return {
        browsers: args._.map(getBrowser),
        browserify: args.browserify,
        source: path.resolve(process.cwd(), args.source),
        server: args.server
    };
}

function getBrowser(name) {
    return { browserName: name };
}

function logRun(runner, exit) {
    var failed = false,
        browser;

    log('Starting test run');

    runner.on('begin', begin);
    runner.on('results', results);
    runner.on('error', onError);
    runner.on('end', end);

    function log(text) {
        ansi.write(text + '\n');
    }

    function success(text) {
        ansi.fg.green().write(text + '\n').reset();
    }

    function error(text) {
        ansi.fg.red().write(text + '\n').reset();
    }

    function begin(b) {
        browser = b.browserName;
        log('Testing browser ' + browser + '...');
    }

    function results(result) {
        result.fail.forEach(function(t) {
            error('Test #' + t.number + ': ' + t.name + ' failed');
        });

        result.errors.forEach(function(e) {
            error('TAP parsing error: ' + e.message);
        });

        if (result.ok) {
            success('Browser ' + browser + ' succeeded');
        } else {
            failed = true;
            error('Browser ' + browser + ' failed');
        }
    }

    function onError(err) {
        failed = true;
        error('Error occurred');
        error(err.toString());
    }

    function end() {
        if (failed) {
            error('Test run failed');
        } else {
            success('Test run succeeded');
        }

        if (exit) {
            process.exit(failed ? 1 : 0);
        }
    }
}
